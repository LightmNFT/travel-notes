/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  LightmEquippableABI,
  LightmEquippableABIInterface,
} from "../LightmEquippableABI";
import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "ERC721InvalidTokenId",
    type: "error",
  },
  {
    inputs: [],
    name: "LightmCurrentCatalogInstanceAlreadyEquippedThisChild",
    type: "error",
  },
  {
    inputs: [],
    name: "LightmIndexOverLength",
    type: "error",
  },
  {
    inputs: [],
    name: "LightmNotInActiveAssets",
    type: "error",
  },
  {
    inputs: [],
    name: "LightmSlotEquipmentNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "LightmSlotIsOccupied",
    type: "error",
  },
  {
    inputs: [],
    name: "RMRKNoAssetMatchingId",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "AllChildrenRejected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAllForAssets",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ApprovalForAssets",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "assetId",
        type: "uint64",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "replacedId",
        type: "uint64",
      },
    ],
    name: "AssetAccepted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "assetId",
        type: "uint64",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "replacedId",
        type: "uint64",
      },
    ],
    name: "AssetAddedToToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "AssetPrioritySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "assetId",
        type: "uint64",
      },
    ],
    name: "AssetRejected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint64",
        name: "assetId",
        type: "uint64",
      },
    ],
    name: "AssetSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint64",
        name: "id",
        type: "uint64",
      },
    ],
    name: "CatalogRelatedAssetAdd",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "childIndex",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "childAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "childId",
        type: "uint256",
      },
    ],
    name: "ChildAccepted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "childIndex",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "childAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "childId",
        type: "uint256",
      },
    ],
    name: "ChildProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "childIndex",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "childAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "childId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "fromPending",
        type: "bool",
      },
    ],
    name: "ChildTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fromTokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "toTokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "NestTransfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "catalogRelatedAssetId",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "catalogRelatedAssetId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "slotId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childCatalogRelatedAssetId",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "contractAddress",
                type: "address",
              },
            ],
            internalType: "struct IRMRKNestableEventsAndStruct.Child",
            name: "child",
            type: "tuple",
          },
        ],
        indexed: false,
        internalType: "struct ILightmEquippableEventsAndStruct.SlotEquipment[]",
        name: "slotEquipments",
        type: "tuple[]",
      },
    ],
    name: "SlotEquipmentsAdd",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "catalogRelatedAssetId",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "uint64[]",
        name: "indexes",
        type: "uint64[]",
      },
    ],
    name: "SlotEquipmentsRemove",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "catalogRelatedAssetId",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "catalogRelatedAssetId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "slotId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childCatalogRelatedAssetId",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "contractAddress",
                type: "address",
              },
            ],
            internalType: "struct IRMRKNestableEventsAndStruct.Child",
            name: "child",
            type: "tuple",
          },
        ],
        internalType: "struct ILightmEquippableEventsAndStruct.SlotEquipment[]",
        name: "slotEquipments",
        type: "tuple[]",
      },
      {
        internalType: "bool",
        name: "doMoreCheck",
        type: "bool",
      },
    ],
    name: "addSlotEquipments",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getActiveCatalogRelatedAssets",
    outputs: [
      {
        internalType: "uint64[]",
        name: "",
        type: "uint64[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllCatalogRelatedAssetIds",
    outputs: [
      {
        internalType: "uint64[]",
        name: "allCatalogRelatedAssetIds",
        type: "uint64[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllSlotEquipments",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "catalogRelatedAssetId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "slotId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childCatalogRelatedAssetId",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "contractAddress",
                type: "address",
              },
            ],
            internalType: "struct IRMRKNestableEventsAndStruct.Child",
            name: "child",
            type: "tuple",
          },
        ],
        internalType: "struct ILightmEquippableEventsAndStruct.SlotEquipment[]",
        name: "slotEquipments",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "catalogRelatedAssetId",
        type: "uint64",
      },
    ],
    name: "getCatalogRelatedAsset",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "id",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "catalogAddress",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "targetSlotId",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "targetCatalogAddress",
            type: "address",
          },
          {
            internalType: "uint64[]",
            name: "partIds",
            type: "uint64[]",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
        ],
        internalType:
          "struct ILightmEquippableEventsAndStruct.CatalogRelatedAsset",
        name: "catalogRelatedAsset",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64[]",
        name: "catalogRelatedAssetIds",
        type: "uint64[]",
      },
    ],
    name: "getCatalogRelatedAssets",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "id",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "catalogAddress",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "targetSlotId",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "targetCatalogAddress",
            type: "address",
          },
          {
            internalType: "uint64[]",
            name: "partIds",
            type: "uint64[]",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
        ],
        internalType:
          "struct ILightmEquippableEventsAndStruct.CatalogRelatedAsset[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "childTokenId",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "childCatalogRelatedAssetId",
        type: "uint64",
      },
    ],
    name: "getSlotEquipment",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "catalogRelatedAssetId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "slotId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childCatalogRelatedAssetId",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "contractAddress",
                type: "address",
              },
            ],
            internalType: "struct IRMRKNestableEventsAndStruct.Child",
            name: "child",
            type: "tuple",
          },
        ],
        internalType: "struct ILightmEquippableEventsAndStruct.SlotEquipment",
        name: "slotEquipment",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "catalogRelatedAssetId",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "slotId",
        type: "uint64",
      },
    ],
    name: "getSlotEquipment",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "catalogRelatedAssetId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "slotId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childCatalogRelatedAssetId",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "contractAddress",
                type: "address",
              },
            ],
            internalType: "struct IRMRKNestableEventsAndStruct.Child",
            name: "child",
            type: "tuple",
          },
        ],
        internalType: "struct ILightmEquippableEventsAndStruct.SlotEquipment",
        name: "slotEquipment",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getSlotEquipmentByIndex",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "catalogRelatedAssetId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "slotId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childCatalogRelatedAssetId",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "contractAddress",
                type: "address",
              },
            ],
            internalType: "struct IRMRKNestableEventsAndStruct.Child",
            name: "child",
            type: "tuple",
          },
        ],
        internalType: "struct ILightmEquippableEventsAndStruct.SlotEquipment",
        name: "slotEquipment",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "catalogRelatedAssetId",
        type: "uint64",
      },
    ],
    name: "getSlotEquipments",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "catalogRelatedAssetId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "slotId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childCatalogRelatedAssetId",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "contractAddress",
                type: "address",
              },
            ],
            internalType: "struct IRMRKNestableEventsAndStruct.Child",
            name: "child",
            type: "tuple",
          },
        ],
        internalType: "struct ILightmEquippableEventsAndStruct.SlotEquipment[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "childTokenId",
        type: "uint256",
      },
    ],
    name: "getSlotEquipments",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "catalogRelatedAssetId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "slotId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childCatalogRelatedAssetId",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "contractAddress",
                type: "address",
              },
            ],
            internalType: "struct IRMRKNestableEventsAndStruct.Child",
            name: "child",
            type: "tuple",
          },
        ],
        internalType: "struct ILightmEquippableEventsAndStruct.SlotEquipment[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "childTokenId",
        type: "uint256",
      },
      {
        internalType: "uint64[]",
        name: "childCatalogRelatedAssetIds",
        type: "uint64[]",
      },
    ],
    name: "removeSlotEquipments",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "catalogRelatedAssetId",
        type: "uint64",
      },
      {
        internalType: "uint64[]",
        name: "slotIds",
        type: "uint64[]",
      },
    ],
    name: "removeSlotEquipments",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class LightmEquippableABI__factory {
  static readonly abi = _abi;
  static createInterface(): LightmEquippableABIInterface {
    return new utils.Interface(_abi) as LightmEquippableABIInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LightmEquippableABI {
    return new Contract(address, _abi, signerOrProvider) as LightmEquippableABI;
  }
}
