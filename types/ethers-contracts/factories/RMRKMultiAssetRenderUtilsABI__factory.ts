/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  RMRKMultiAssetRenderUtilsABI,
  RMRKMultiAssetRenderUtilsABIInterface,
} from "../RMRKMultiAssetRenderUtilsABI";
import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "RMRKTokenHasNoAssets",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getActiveAssets",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "id",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "priority",
            type: "uint16",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
        ],
        internalType: "struct RMRKMultiAssetRenderUtils.ActiveAsset[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint64[]",
        name: "assetIds",
        type: "uint64[]",
      },
    ],
    name: "getAssetsById",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getPendingAssets",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "id",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "toBeReplacedId",
            type: "uint64",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
        ],
        internalType: "struct RMRKMultiAssetRenderUtils.PendingAsset[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getTopAssetMetaForToken",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class RMRKMultiAssetRenderUtilsABI__factory {
  static readonly abi = _abi;
  static createInterface(): RMRKMultiAssetRenderUtilsABIInterface {
    return new utils.Interface(_abi) as RMRKMultiAssetRenderUtilsABIInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RMRKMultiAssetRenderUtilsABI {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RMRKMultiAssetRenderUtilsABI;
  }
}
