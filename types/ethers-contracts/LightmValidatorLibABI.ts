/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace IRMRKNestableEventsAndStruct {
  export type ChildStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
  };

  export type ChildStructOutput = [BigNumber, string] & {
    tokenId: BigNumber;
    contractAddress: string;
  };
}

export declare namespace ILightmEquippableEventsAndStruct {
  export type SlotEquipmentStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>;
    slotId: PromiseOrValue<BigNumberish>;
    childCatalogRelatedAssetId: PromiseOrValue<BigNumberish>;
    child: IRMRKNestableEventsAndStruct.ChildStruct;
  };

  export type SlotEquipmentStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    IRMRKNestableEventsAndStruct.ChildStructOutput
  ] & {
    tokenId: BigNumber;
    catalogRelatedAssetId: BigNumber;
    slotId: BigNumber;
    childCatalogRelatedAssetId: BigNumber;
    child: IRMRKNestableEventsAndStruct.ChildStructOutput;
  };
}

export interface LightmValidatorLibABIInterface extends utils.Interface {
  functions: {
    "getValidChildrenOf(address,uint256)": FunctionFragment;
    "getValidSlotEquipments(address,uint256,uint64)": FunctionFragment;
    "isAValidCatalogContract(address)": FunctionFragment;
    "isAValidCatalogInstance(address,uint256,uint64)": FunctionFragment;
    "isAValidEquippableContract(address)": FunctionFragment;
    "isAValidMultiAssetContract(address)": FunctionFragment;
    "isAValidNestableContract(address)": FunctionFragment;
    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)),bool)": FunctionFragment;
    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)))": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getValidChildrenOf"
      | "getValidSlotEquipments"
      | "isAValidCatalogContract"
      | "isAValidCatalogInstance"
      | "isAValidEquippableContract"
      | "isAValidMultiAssetContract"
      | "isAValidNestableContract"
      | "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)),bool)"
      | "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)))"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getValidChildrenOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidSlotEquipments",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAValidCatalogContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAValidCatalogInstance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAValidEquippableContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAValidMultiAssetContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAValidNestableContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)),bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILightmEquippableEventsAndStruct.SlotEquipmentStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getValidChildrenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidSlotEquipments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAValidCatalogContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAValidCatalogInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAValidEquippableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAValidMultiAssetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAValidNestableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)),bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface LightmValidatorLibABI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LightmValidatorLibABIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getValidChildrenOf(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IRMRKNestableEventsAndStruct.ChildStructOutput[]] & {
        validChildren: IRMRKNestableEventsAndStruct.ChildStructOutput[];
      }
    >;

    getValidSlotEquipments(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]]>;

    isAValidCatalogContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isAValidCatalogInstance(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isAValidEquippableContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isAValidMultiAssetContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isAValidNestableContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)),bool)"(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
      checkExistingData: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)))"(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  getValidChildrenOf(
    targetContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput[]>;

  getValidSlotEquipments(
    targetContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]>;

  isAValidCatalogContract(
    targetContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  isAValidCatalogInstance(
    targetContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  isAValidEquippableContract(
    targetContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  isAValidMultiAssetContract(
    targetContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  isAValidNestableContract(
    targetContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)),bool)"(
    targetContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
    checkExistingData: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)))"(
    targetContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getValidChildrenOf(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput[]>;

    getValidSlotEquipments(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]>;

    isAValidCatalogContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isAValidCatalogInstance(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isAValidEquippableContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isAValidMultiAssetContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isAValidNestableContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)),bool)"(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
      checkExistingData: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)))"(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getValidChildrenOf(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidSlotEquipments(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAValidCatalogContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAValidCatalogInstance(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAValidEquippableContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAValidMultiAssetContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAValidNestableContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)),bool)"(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
      checkExistingData: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)))"(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getValidChildrenOf(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidSlotEquipments(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAValidCatalogContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAValidCatalogInstance(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAValidEquippableContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAValidMultiAssetContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAValidNestableContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)),bool)"(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
      checkExistingData: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSlotEquipmentValid(address,uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address)))"(
      targetContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
